// C++ class header boilerplate exported from ReflectionTool
// This is automatically generated by the tools.
// DO NOT modify this manually!

#include "TestHeader.h"
#include "RefelectionHelper.h"

using namespace cppfd;
static const ReflectiveClass<TestClass> g_refTestClass = ReflectiveClass<TestClass>("TestClass")
	.RefConstructor()
	.RefConstructor<int, const std::string &>()
	.RefConstMethod(&TestClass::Output,"Output")
	.RefStaticMethod(&TestClass::StaticOutput,"StaticOutput")
	.RefMethod(&TestClass::SetIntVal,"SetIntVal")
	.RefMethod(&TestClass::SetStringVal,"SetStringVal")
	.RefConstMethod(&TestClass::VirtualFunc,"VirtualFunc", true)
	.RefField(&TestClass::mIntVal,"mIntVal")
	.RefField(&TestClass::mStrVal,"mStrVal")
	.RefStaticField(&TestClass::mStaticIntVal,"mStaticIntVal");

static const ReflectiveClass<TestSubClass> g_refTestSubClass = ReflectiveClass<TestSubClass>("TestSubClass", (TestClass *)0)
	.RefConstructor()
	.RefField(&TestSubClass::mArray,"mArray");

